# Generated by Django 2.2.10 on 2020-06-20 08:42

from django.db import migrations

def generate_view_forecast_drop_query(archived_period_name):
    return f"DROP VIEW if exists budget_forecast_{archived_period_name}_view CASCADE;"


def generate_create_view_forecast_query(archived_period_name, archived_period_id):
    drop_query = generate_view_forecast_drop_query(archived_period_name)
    query = f'Create view budget_forecast_{archived_period_name}_view as '\
        f'SELECT ROW_NUMBER () ' \
            f'OVER (ORDER BY coalesce(b.financial_code_id, f.financial_code_id)) as id,' \
            f'coalesce(b.financial_code_id, f.financial_code_id) as financial_code_id,' \
            f'coalesce(b.financial_year_id, f.financial_year_id) as financial_year, ' \
            f'coalesce(f.archived_period_id, b.archived_period_id) as archived_period_id, ' \
            f'coalesce(amount, 0) as budget, ' \
            f'coalesce(apr, 0) as apr, ' \
            f'coalesce(may, 0) as may, ' \
            f'coalesce(jun, 0) as jun, ' \
            f'coalesce(jul, 0) as jul, ' \
            f'coalesce(aug, 0) as aug, ' \
            f'coalesce(sep, 0) as sep, ' \
            f'coalesce(oct, 0) as oct, ' \
            f'coalesce(nov, 0) as nov, ' \
            f'coalesce("dec", 0) as "dec", ' \
            f'coalesce(jan, 0) as jan, ' \
            f'coalesce(feb, 0) as feb, ' \
            f'coalesce(mar, 0) as mar, ' \
            f'coalesce(adj1, 0) as adj1, ' \
            f'coalesce(adj2, 0) as adj2, ' \
            f'coalesce(adj3, 0) as adj3 ' \
            f'FROM monthly_forecast_{archived_period_name}  f ' \
            f'FULL OUTER JOIN public.end_of_month_monthlytotalbudget b ' \
            f'on b.financial_code_id = f.financial_code_id ' \
            f'and b.financial_year_id = f.financial_year_id ' \
            f'and b.archived_period_id = f.archived_period_id ' \
            f'WHERE coalesce(f.archived_period_id, b.archived_period_id) = {archived_period_id};'

    return f'{drop_query} {query}'

class Migration(migrations.Migration):

    dependencies = [
        ('end_of_month', '0008_merge_20200527_1737'),
    ]

    operations = [
        migrations.RunSQL(
            """
            DROP VIEW if exists monthly_forecast_apr CASCADE;
            DROP VIEW if exists monthly_forecast_may CASCADE;
            DROP VIEW if exists monthly_forecast_jun CASCADE;
            DROP VIEW if exists monthly_forecast_jul CASCADE;
            DROP VIEW if exists monthly_forecast_aug CASCADE;
            DROP VIEW if exists monthly_forecast_sep CASCADE;
            DROP VIEW if exists monthly_forecast_oct CASCADE;
            DROP VIEW if exists monthly_forecast_nov CASCADE;
            DROP VIEW if exists monthly_forecast_dec CASCADE;
            DROP VIEW if exists monthly_forecast_jan CASCADE;
            DROP VIEW if exists monthly_forecast_feb CASCADE;
            DROP VIEW if exists monthly_forecast_mar CASCADE;
            DROP VIEW if exists monthly_forecast_adj1 CASCADE;
            DROP VIEW if exists monthly_forecast_adj2 CASCADE;
            DROP VIEW if exists monthly_forecast_adj3 CASCADE;


           CREATE VIEW monthly_forecast_apr as
                SELECT 1 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 1 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;
 
           CREATE VIEW monthly_forecast_may as
                SELECT 2 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 2 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

           CREATE VIEW monthly_forecast_jun as
                SELECT 3 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 3 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
               GROUP BY financial_code_id,  financial_year_id;

           CREATE VIEW monthly_forecast_jul as
                SELECT 4 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL  THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL  THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL  THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 4 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

                CREATE VIEW monthly_forecast_aug as
                SELECT 5 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 5 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_sep as
                SELECT 6 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 6 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_oct as
                SELECT 7 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id = 7 THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id = 7 THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 7 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 7 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 7 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 7 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 7 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 7 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_nov as
                SELECT 8 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id = 8 THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 8 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 8 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 8 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 8 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 8 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 8 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_dec as
                SELECT 9 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id = 9 THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 9 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 9 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 9 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 9 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 9 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_jan as
                SELECT 10 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id = 10 THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 10 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 10 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 10 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 10 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_feb as
                SELECT 11 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id = 11 THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 11 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 11 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 11 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_mar as
                SELECT 12 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id = 12 THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 12 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 12 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_adj1 as
                SELECT 13 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 13 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 13 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_adj2 as
                SELECT 14 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id = 14 THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id = 14 THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;

            CREATE VIEW monthly_forecast_adj3 as
                SELECT 15 as archived_period_id, financial_code_id, financial_year_id,
                       SUM(CASE WHEN financial_period_id = 1 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS apr,
                       SUM(CASE WHEN financial_period_id = 2 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS may,
                       SUM(CASE WHEN financial_period_id = 3 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jun,
                       SUM(CASE WHEN financial_period_id = 4 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jul,
                       SUM(CASE WHEN financial_period_id = 5 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS aug,
                       SUM(CASE WHEN financial_period_id = 6 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS sep,
                       SUM(CASE WHEN financial_period_id = 7 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS oct,
                       SUM(CASE WHEN financial_period_id = 8 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS nov,
                       SUM(CASE WHEN financial_period_id = 9 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS "dec",
                       SUM(CASE WHEN financial_period_id = 10 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS jan,
                       SUM(CASE WHEN financial_period_id = 11 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS feb,
                       SUM(CASE WHEN financial_period_id = 12 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS mar,
                       SUM(CASE WHEN financial_period_id = 13 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS adj1 ,
                       SUM(CASE WHEN financial_period_id = 14 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS adj2 ,
                       SUM(CASE WHEN financial_period_id = 15 and a.archived_period_id IS NULL THEN amount ELSE NULL END) AS adj3
                FROM forecast_forecastmonthlyfigure left outer join public.end_of_month_endofmonthstatus a
                on forecast_forecastmonthlyfigure.archived_status_id = a.id
                GROUP BY financial_code_id,  financial_year_id;
        """,
            """
           DROP VIEW if exists monthly_forecast_apr CASCADE;
            DROP VIEW if exists monthly_forecast_may CASCADE;
            DROP VIEW if exists monthly_forecast_jun CASCADE;
            DROP VIEW if exists monthly_forecast_jul CASCADE;
            DROP VIEW if exists monthly_forecast_aug CASCADE;
            DROP VIEW if exists monthly_forecast_sep CASCADE;
            DROP VIEW if exists monthly_forecast_oct CASCADE;
            DROP VIEW if exists monthly_forecast_nov CASCADE;
            DROP VIEW if exists monthly_forecast_dec CASCADE;
            DROP VIEW if exists monthly_forecast_jan CASCADE;
            DROP VIEW if exists monthly_forecast_feb CASCADE;
            DROP VIEW if exists monthly_forecast_mar CASCADE;
            DROP VIEW if exists monthly_forecast_adj1 CASCADE;
            DROP VIEW if exists monthly_forecast_adj2 CASCADE;
            DROP VIEW if exists monthly_forecast_adj3 CASCADE;
                """,
        ),
            migrations.RunSQL(generate_create_view_forecast_query('apr', 1),
                              generate_view_forecast_drop_query('apr')),
            migrations.RunSQL(generate_create_view_forecast_query('may', 2),
                              generate_view_forecast_drop_query('may')),
            migrations.RunSQL(generate_create_view_forecast_query('jun', 3),
                              generate_view_forecast_drop_query('jun')),
            migrations.RunSQL(generate_create_view_forecast_query('jul', 4),
                              generate_view_forecast_drop_query('jul')),
            migrations.RunSQL(generate_create_view_forecast_query('aug', 5),
                              generate_view_forecast_drop_query('aug')),
            migrations.RunSQL(generate_create_view_forecast_query('sep', 6),
                              generate_view_forecast_drop_query('sep')),
            migrations.RunSQL(generate_create_view_forecast_query('oct', 7),
                              generate_view_forecast_drop_query('oct')),
            migrations.RunSQL(generate_create_view_forecast_query('nov', 8),
                              generate_view_forecast_drop_query('nov')),
            migrations.RunSQL(generate_create_view_forecast_query('dec', 9),
                              generate_view_forecast_drop_query('dec')),
            migrations.RunSQL(generate_create_view_forecast_query('jan', 10),
                              generate_view_forecast_drop_query('jan')),
            migrations.RunSQL(generate_create_view_forecast_query('feb', 11),
                              generate_view_forecast_drop_query('feb')),
            migrations.RunSQL(generate_create_view_forecast_query('mar', 12),
                              generate_view_forecast_drop_query('mar')),
            migrations.RunSQL(generate_create_view_forecast_query('adj1', 13),
                              generate_view_forecast_drop_query('adj1')),
            migrations.RunSQL(generate_create_view_forecast_query('adj2', 14),
                              generate_view_forecast_drop_query('adj2')),
            migrations.RunSQL(generate_create_view_forecast_query('adj3', 15),
                              generate_view_forecast_drop_query('adj3')),

    ]
