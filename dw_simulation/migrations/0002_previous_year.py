# Generated by Django 3.2.13 on 2022-08-31 12:23

from django.db import migrations

drop_sql = """
DROP VIEW IF EXISTS dw_full_data_set;
DROP VIEW IF EXISTS dw_previous_year_data;
DROP VIEW IF EXISTS dw_prev_year_outturn;
DROP VIEW IF EXISTS dw_previous_year_ytd;
DROP TABLE IF EXISTS dw_simulation_financial_period_in_use;
"""


create_sql= """
CREATE TABLE IF NOT EXISTS dw_simulation_financial_period_in_use
(
    financial_period_code integer,
    period_short_name character varying(10)
);

	    
CREATE VIEW dw_prev_year_outturn as
SELECT financial_code, sum(previous_year_actual) as previous_year_outturn
	FROM public.dw_simulation_mi_report_previous_year_actual
	group by financial_code;

CREATE VIEW dw_previous_year_ytd as
SELECT financial_code, financial_period_code,  
sum(previous_year_actual) OVER (PARTITION BY financial_code ORDER by financial_period_code) as previous_year_ytd
	FROM public.dw_simulation_mi_report_previous_year_actual;
	    
CREATE VIEW dw_previous_year_data as 
        SELECT  
        pa.cost_centre_code, pa.actual_nac, pa.programme_code, 
        pa.contract_code, pa.market_code, pa.project_code, pa.expenditure_type, pa.expenditure_type_description, 
        pa.previous_year_actual as previous_year_period_actual, 
        pa_o.previous_year_outturn, 
        pa.financial_period_code,
        pa.financial_period_name, 
        pa_ytd.previous_year_ytd,
        per.financial_period_code as archived_financial_period_code,
        per.period_short_name as archived_financial_period_name,
        pa.financial_year,
        pa.archiving_year
        
            FROM public.dw_simulation_mi_report_previous_year_actual pa
            inner join dw_prev_year_outturn pa_o on pa_o.financial_code = pa.financial_code
            inner join dw_previous_year_ytd pa_ytd on pa_ytd.financial_code = pa.financial_code 
            AND pa.financial_period_code = pa_ytd.financial_period_code
            CROSS JOIN dw_simulation_financial_period_in_use per;    	    

	    
CREATE VIEW dw_full_data_set as
SELECT 
    COALESCE(c.cost_centre_code, p.cost_centre_code) as cost_centre_code,
    COALESCE(c.actual_nac, p.actual_nac) as actual_nac,
    COALESCE(c.programme_code, p.programme_code) as programme_code,
    COALESCE(c.contract_code, p.contract_code) as contract_code,
    COALESCE(c.market_code, p.market_code) as market_code,
    COALESCE(c.project_code, p.project_code) as project_code,
    COALESCE(c.expenditure_type, p.expenditure_type) as expenditure_type,
    COALESCE(c.expenditure_type_description, p.expenditure_type_description) as expenditure_type_description,
    COALESCE(c.financial_period_code, p.financial_period_code) as financial_period_code,
    COALESCE(c.financial_period_name, p.financial_period_name) as financial_period_name,
    COALESCE(c.archived_financial_period_code, p.archived_financial_period_code) as archived_financial_period_code,
    COALESCE(c.archived_financial_period_name, p.archived_financial_period_name) as archived_financial_period_name,
    COALESCE(c.archiving_year, p.archiving_year) as archiving_year,
    COALESCE(c.financial_year, p.financial_year) as financial_year,
    COALESCE(c.period_budget, 0) / 100 as period_budget,
    COALESCE(c.period_actual, 0) / 100 as period_actual,
    COALESCE(c.period_forecast, 0) / 100 as period_forecast,
    COALESCE(c.period_actual_forecast, 0) / 100 as period_actual_forecast,
    COALESCE(c.period_actual_forecast_budget_variance, 0) / 100 as period_actual_forecast_budget_variance,
    COALESCE(c.ytd_budget, 0) / 100 as ytd_budget,
    COALESCE(c.ytd_actual, 0) / 100 as ytd_actual,
    COALESCE(c.ytd_actual_forecast, 0) / 100 as ytd_actual_forecast,
    COALESCE(c.ytd_actual_forecast_budget_variance, 0) / 100 as ytd_actual_forecast_budget_variance,
    COALESCE(c.full_year_budget, 0) / 100 as full_year_budget,
    COALESCE(c.full_year_actual_forecast, 0) / 100 as full_year_actual_forecast,
    COALESCE(c.full_year_actual_forecast_budget_variance, 0) / 100 as full_year_actual_forecast_budget_variance,
    COALESCE(c.ytd_run_rate, 0) / 100 as ytd_run_rate,
    COALESCE(c.full_year_run_rate, 0) / 100 as full_year_run_rate,
    COALESCE(c.previous_period_forecast, 0) / 100 as previous_period_forecast,
    COALESCE(p.previous_year_period_actual, 0) / 100 as previous_year_period_actual,
    COALESCE(p.previous_year_outturn, 0) / 100 as previous_year_outturn,
    COALESCE(p.previous_year_ytd, 0) / 100 as previous_year_ytd
        FROM dw_previous_year_data p full outer join dw_current_year_data c
        ON
        COALESCE(c.cost_centre_code, '') = COALESCE(p.cost_centre_code, '') AND 
        COALESCE(c.actual_nac, 0) = COALESCE(p.actual_nac, 0) AND 
        COALESCE(c.programme_code, '') = COALESCE(p.programme_code, '') AND 
        COALESCE(c.contract_code, '') = COALESCE(p.contract_code, '') AND 
        COALESCE(c.market_code, '') = COALESCE(p.market_code, '') AND 
        COALESCE(c.project_code, '') = COALESCE(p.project_code, '') AND
        c.financial_period_code = p.financial_period_code AND
        c.archived_financial_period_code = p.archived_financial_period_code
        ;
	    
	    """


class Migration(migrations.Migration):

    dependencies = [
        ('dw_simulation', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            f"{drop_sql} {create_sql}",
            drop_sql,
        ),
    ]
