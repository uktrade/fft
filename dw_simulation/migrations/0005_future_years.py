# Generated by Django 3.2.15 on 2022-09-12 15:27

from django.db import migrations

drop_sql = """
    DROP VIEW IF EXISTS dw_future_year_data;
    DROP VIEW IF EXISTS dw_future_year_data_by_year;
    DROP VIEW IF EXISTS dw_full_year_future_years;
    DROP VIEW IF EXISTS dw_ytd_future_years;
    DROP VIEW IF EXISTS dw_budget_forecast_future_years;
    DROP VIEW IF EXISTS dw_no_data_future_year_full_table;
    

    DROP TABLE IF  EXISTS  dw_simulation_mi_report_future_year_forecast;
    DROP TABLE IF  EXISTS  dw_simulation_mi_report_future_year_budget;      
"""

create_sql = """
CREATE TABLE IF NOT EXISTS  dw_simulation_mi_report_future_year_forecast
(
    cost_centre_code character varying(6),
    actual_nac integer,
    programme_code character varying(50),
    contract_code character varying,
    market_code character varying,
    project_code character varying,
    expenditure_type character varying(100),
    expenditure_type_description character varying(100),
    financial_code integer,
    future_forecast numeric,
    financial_period_code integer,
    financial_period_name character varying(10),
    archived_financial_period_code integer,
    archived_financial_period_name character varying(10),
    financial_year integer,
    archiving_year integer
);

CREATE TABLE IF NOT EXISTS  dw_simulation_mi_report_future_year_budget
(
    cost_centre_code character varying(6),
    actual_nac integer,
    programme_code character varying(50),
    contract_code character varying,
    market_code character varying,
    project_code character varying,
    expenditure_type character varying(100),
    expenditure_type_description character varying(100),
    financial_code integer,
    future_budget numeric,
    financial_period_code integer,
    financial_period_name character varying(10),
    archived_financial_period_code integer,
    archived_financial_period_name character varying(10),
    financial_year integer,
    archiving_year integer
);

CREATE VIEW dw_no_data_future_year_full_table as
    SELECT distinct cost_centre_code, actual_nac, programme_code, contract_code, market_code, project_code, 
    expenditure_type, expenditure_type_description, financial_code, 
    0 as future_budget, 
    0 as future_forecast, 
	t.financial_period_code, 
	t.financial_period_name, 
	t.archived_period_code as archived_financial_period_code, 
	t.archived_period_name as archived_financial_period_name, 
    financial_year, archiving_year
        FROM (
                SELECT cost_centre_code, actual_nac, programme_code, contract_code, market_code, 
                    project_code, expenditure_type, expenditure_type_description, financial_code,
			        financial_year, archiving_year
	            FROM public.dw_simulation_mi_report_future_year_budget
                UNION
                SELECT cost_centre_code, actual_nac, programme_code, contract_code, market_code, 
                    project_code, expenditure_type, expenditure_type_description, financial_code,
			        financial_year, archiving_year
                    FROM public.dw_simulation_mi_report_future_year_forecast
		) u
        CROSS JOIN dw_full_period_list_view t;



CREATE VIEW dw_budget_forecast_future_years as
SELECT        
	   COALESCE(b.financial_code, f.financial_code, e.financial_code) as financial_code,
	   COALESCE(b.cost_centre_code, f.cost_centre_code, e.cost_centre_code) as cost_centre_code,
       COALESCE(b.actual_nac,f.actual_nac, e.actual_nac) as actual_nac,
       COALESCE(b.programme_code, f.programme_code, e.programme_code) as programme_code,
       COALESCE(b.contract_code, f.contract_code, e.contract_code) as contract_code,
       COALESCE(b.market_code, f.market_code, e.market_code) as market_code,
       COALESCE(b.project_code, f.project_code, e.project_code) as project_code,
       COALESCE(b.expenditure_type, f.expenditure_type, e.expenditure_type) as expenditure_type,
       COALESCE(b.expenditure_type_description, f.expenditure_type_description, e.expenditure_type_description) as expenditure_type_description,
       COALESCE(b.financial_period_code, f.financial_period_code, e.financial_period_code) as financial_period_code,
       COALESCE(b.financial_period_name, f.financial_period_name, e.financial_period_name) as financial_period_name,
       COALESCE(b.archived_financial_period_code, f.archived_financial_period_code, e.archived_financial_period_code) as archived_financial_period_code,
       COALESCE(b.archived_financial_period_name, f.archived_financial_period_name, e.archived_financial_period_name) as archived_financial_period_name,
       COALESCE(b.financial_year, f.financial_year) as financial_year,
       COALESCE(b.archiving_year,f.archiving_year) as archiving_year,
	   COALESCE(b.future_budget, 0) as future_budget,
	   COALESCE(f.future_forecast, 0) as future_forecast
	FROM dw_simulation_mi_report_future_year_budget b
	full outer join 
		dw_simulation_mi_report_future_year_forecast f
			ON COALESCE(b.financial_code, 0) = COALESCE(f.financial_code, 0)
			AND COALESCE(b.archived_financial_period_code, 0) = COALESCE(f.archived_financial_period_code, 0)
		  	AND COALESCE(f.financial_period_code, 0) = COALESCE(b.financial_period_code, 0) 
		  	AND COALESCE(b.financial_year, 0) = COALESCE(f.financial_year, 0)
		  	AND COALESCE(b.archiving_year, 0) = COALESCE(f.archiving_year, 0)
	FULL OUTER JOIN dw_no_data_future_year_full_table e
			ON COALESCE(e.financial_code, 0) = COALESCE(f.financial_code, 0)
			AND COALESCE(e.archived_financial_period_code, 0) = COALESCE(f.archived_financial_period_code, 0)
		  	AND COALESCE(e.financial_period_code, 0) = COALESCE(b.financial_period_code, 0) 
		  	AND COALESCE(e.financial_year, 0) = COALESCE(f.financial_year, 0)
		  	AND COALESCE(e.archiving_year, 0) = COALESCE(f.archiving_year, 0)
;


CREATE VIEW dw_full_year_future_years as 
    SELECT financial_code, 
        sum(future_budget) as future_budget_full_year, 
        sum(future_forecast) as future_forecast_full_year, 
        archived_financial_period_code, financial_year, archiving_year
    FROM dw_budget_forecast_future_years
    GROUP BY financial_code, archived_financial_period_code, financial_year, archiving_year;

CREATE VIEW dw_ytd_future_years as
	SELECT financial_code, financial_period_code, archived_financial_period_code, financial_year, archiving_year, 
	sum(future_budget) 
	OVER (PARTITION BY financial_code, archived_financial_period_code, financial_year, archiving_year ORDER BY financial_period_code)
	AS ytd_future_budget,
	sum(future_forecast) 
	OVER (PARTITION BY financial_code, archived_financial_period_code, financial_year, archiving_year ORDER BY financial_period_code)
	AS ytd_future_forecast
		FROM dw_budget_forecast_future_years;


CREATE VIEW dw_future_year_data_by_year as
SELECT 
        cost_centre_code, actual_nac, programme_code, 
        contract_code, market_code, project_code, expenditure_type, expenditure_type_description,        
        financial_period_name,
        archived_financial_period_name, 
		b.financial_year, 
		b.archiving_year,
        b.financial_code, 
        b.future_budget, 
		b.future_forecast,
        ytd_future_budget,
		ytd_future_forecast,
        b_o.future_budget_full_year,
        b_o.future_forecast_full_year,		
        b.financial_period_code,  b.archived_financial_period_code
            FROM (public.dw_budget_forecast_future_years b
            JOIN public.dw_ytd_future_years b_ytd on b_ytd.financial_code = b.financial_code 
                AND b.financial_period_code = b_ytd.financial_period_code 
                AND b.archived_financial_period_code = b_ytd.archived_financial_period_code
				AND b.financial_year = b_ytd.financial_year
				AND b.archiving_year = b_ytd.archiving_year)
            JOIN public.dw_full_year_future_years b_o on b_o.financial_code = b.financial_code 
                AND b.archived_financial_period_code = b_o.archived_financial_period_code
				AND b.financial_year = b_o.financial_year
				AND b.archiving_year = b_o.archiving_year;


CREATE VIEW dw_future_year_data as
SELECT cost_centre_code, 
		actual_nac, 
		programme_code, 
		contract_code, 
		market_code, 
		project_code, 
		expenditure_type, 
		expenditure_type_description, 
		financial_period_name, 
		archived_financial_period_name, 
		archiving_year, 
		financial_code, 
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 1 THEN d.future_budget
            ELSE 0::bigint
        END) AS future_budget_year_plus_one,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 2 THEN d.future_budget
            ELSE 0::bigint
        END) AS future_budget_year_plus_two,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 3 THEN d.future_budget
            ELSE 0::bigint
        END) AS future_budget_year_plus_three,
    
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 1 THEN d.future_forecast
            ELSE 0::bigint
        END) AS future_forecast_year_plus_one,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 2 THEN d.future_forecast
            ELSE 0::bigint
        END) AS future_forecast_year_plus_two,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 3 THEN d.future_forecast
            ELSE 0::bigint
        END) AS future_forecast_year_plus_three,

		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 1 THEN d.ytd_future_budget
            ELSE 0::bigint
        END) AS ytd_future_budget_year_plus_one,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 2 THEN d.ytd_future_budget
            ELSE 0::bigint
        END) AS ytd_future_budget_year_plus_two,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 3 THEN d.ytd_future_budget
            ELSE 0::bigint
        END) AS ytd_future_budget_year_plus_three,

		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 1 THEN d.ytd_future_forecast
            ELSE 0::bigint
        END) AS ytd_future_forecast_year_plus_one,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 2 THEN d.ytd_future_forecast
            ELSE 0::bigint
        END) AS ytd_future_forecast_year_plus_two,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 3 THEN d.ytd_future_forecast
            ELSE 0::bigint
        END) AS ytd_future_forecast_year_plus_three,

		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 1 THEN d.future_budget_full_year
            ELSE 0::bigint
        END) AS future_budget_full_year_year_plus_one,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 2 THEN d.future_budget_full_year
            ELSE 0::bigint
        END) AS future_budget_full_year_year_plus_two,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 3 THEN d.future_budget_full_year
            ELSE 0::bigint
        END) AS future_budget_full_year_year_plus_three,

		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 1 THEN d.future_forecast_full_year
            ELSE 0::bigint
        END) AS future_forecast_full_year_year_plus_one,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 2 THEN d.future_forecast_full_year
            ELSE 0::bigint
        END) AS future_forecast_full_year_year_plus_two,
		SUM(
        CASE
            WHEN d.financial_year = y.financial_year + 3 THEN d.future_forecast_full_year
            ELSE 0::bigint
        END) AS future_forecast_full_year_year_plus_three,

-- future_budget_full_year,
-- future_forecast_full_year, 
financial_period_code, 
archived_financial_period_code
	FROM public.dw_future_year_data_by_year d, (SELECT financial_year FROM core_financialyear where current = true) y
	GROUP BY cost_centre_code, 
			actual_nac, 
			programme_code, 
			contract_code, 
			market_code, 
			project_code, 
			expenditure_type, 
			expenditure_type_description, 
			financial_period_name, 
			archived_financial_period_name, 
			archiving_year, 
			financial_code, 
			financial_period_code, 
			archived_financial_period_code
	;
"""


class Migration(migrations.Migration):

    dependencies = [
        ('dw_simulation', '0004_current_past_year'),
    ]

    operations = [
        migrations.RunSQL(
            f"{drop_sql} {create_sql}",
            drop_sql,
        ),
    ]
