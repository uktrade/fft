{"version":3,"sources":["Reducers/Mouse.js","Reducers/Cells.js","Reducers/Edit.js","Reducers/Select.js","Store.js","Components/RowContext/index.js","Components/TableRow/index.js","Util.js","Components/TableCell/index.js","Components/TableHandle/index.js","Components/ColumnHeader/index.js","Components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["SET_MOUSE_DOWN","mouseInitial","down","allCells","createSlice","slice","initialState","reducers","ADD_CELL","state","action","payload","id","index","programmeCode","naturalAccountCode","projectCode","key","editable","value","rowIndex","rect","selected","edited","SET_RECT","SELECT_CELL","UNSELECT_CELL","SET_EDITED","SET_VALUE","UNSELECT_ALL","cellId","actions","SET_EDIT_CELL","editCellInitial","select","initial","last","SET_INITIAL_CELL","SET_LAST_CELL","persistConfig","storage","appReducer","combineReducers","mouse","type","Object","assign","editCell","store","persistReducer","createStore","RowContext","React","createContext","RowProvider","Provider","Consumer","TableRow","children","dispatch","useDispatch","useSelector","selectRow","setInital","cell","selectColumn","colKey","className","getCellId","months","TableCell","cellRef","createRef","inputRef","useRef","mouseDn","useEffect","current","getBoundingClientRect","focus","cellData","isSelected","ref","onDoubleClick","onMouseOver","onMouseDown","onChange","e","target","parseInt","onKeyPress","event","onKeyDown","keyCode","colIndex","indexOf","inScope","push","nextCell","filter","TableHandle","context","useContext","onClick","ColumnHeader","Table","initialCell","lastCell","useState","errorMessage","setErrorMessage","mouseDown","captureMouseDn","srcElement","localName","captureMouseUp","handleKeyDown","console","log","getState","getTopLeftCell","cells","topLeftCell","x","y","capturePaste","lines","clipboardData","getData","split","selectedCells","lineParts","linePart","setClipBoardContent","preventDefault","clipBoardContent","navigator","clipboard","writeText","window","cell_data","cellIndex","table_data","forEach","i","editable_periods","length","shortName","toLowerCase","addEventListener","removeEventListener","horizontalDirection","verticalDirection","selectable","aria-labelledby","role","tabIndex","data-module","href","monthCells","month","getCells","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55e6c9ea.chunk.js","sourcesContent":["\nexport const SET_MOUSE_DOWN = 'SET_MOUSE_DOWN';\n\nconst mouseInitial = {\n    down: false\n};\n\nexport const mouse = (state = mouseInitial, action) => {\n    switch (action.type) {\n        case SET_MOUSE_DOWN:\n            return Object.assign({}, state, {\n                down: action.down\n            });\n        default:\n            return state;\n    }\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\n// Use of this lib guarentees no state mutatation\n\nconst allCells = createSlice({\n    slice: 'allCells',\n    initialState: {},\n    reducers: {\n        ADD_CELL: (state, action) => {\n            state[action.payload.id] = {\n                index: action.payload.index,\n                programmeCode: action.payload.programmeCode,\n                naturalAccountCode: action.payload.naturalAccountCode,\n                projectCode: action.payload.projectCode,\n                id: action.payload.id,\n                key: action.payload.key,\n                editable: action.payload.editable,\n                value: action.payload.value,\n                rowIndex: action.payload.rowIndex,\n                rect: null,\n                selected: false,\n                edited: false\n            }\n        },\n        SET_RECT: (state, action) => {\n            state[action.payload.id][\"rect\"] = action.payload.rect;\n        },\n        SELECT_CELL: (state, action) => {\n            state[action.payload.id][\"selected\"] = true;\n        },\n        UNSELECT_CELL: (state, action) => {\n            state[action.payload.id][\"selected\"] = false;\n        },\n        SET_EDITED: (state, action) => {\n            state[action.payload.id][\"edited\"] = true;\n        },\n        SET_VALUE: (state, action) => {\n            state[action.payload.id][\"value\"] = action.payload.value;\n        },\n        UNSELECT_ALL: (state, action) => {\n            for (var cellId in state) {\n                state[cellId][\"selected\"] = false;\n            }\n        }\n    }\n});\n\nexport const { \n    ADD_CELL, \n    SELECT_CELL,\n    UNSELECT_CELL,\n    SET_EDITED,\n    UNSELECT_ALL,\n    SET_RECT,\n    SET_VALUE\n} = allCells.actions;\n\nexport default allCells.reducer;\n","\nexport const SET_EDIT_CELL = 'SET_EDIT_CELL';\n\nconst editCellInitial = {\n\tcellId: null\n}\n\nexport const editCell = (state = editCellInitial, action) => {\n    switch (action.type) {\n        case SET_EDIT_CELL:\n            return Object.assign({}, state, {\n            \tcellId: action.cellId\n            });\n        default:\n            return state;\n    }\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\n// Use of this lib guarentees no state mutatation\n\nconst select = createSlice({\n    slice: 'select',\n    initialState: {\n        initial: null,\n        last: null\n    },\n    reducers: {\n        SET_INITIAL_CELL: (state, action) => {\n            state[\"initial\"] = action.payload.id\n        },\n        SET_LAST_CELL: (state, action) => {\n            state[\"last\"] = action.payload.id\n        }\n    }\n});\n\nexport const {\n    SET_INITIAL_CELL,\n    SET_LAST_CELL,\n} = select.actions;\n\nexport default select.reducer;\n","'use strict';\n\nimport { createStore, combineReducers } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { mouse } from './Reducers/Mouse';\nimport allCells from './Reducers/Cells';\nimport { editCell } from './Reducers/Edit'\nimport select from './Reducers/Select'\n\nconst persistConfig = {\n    key: 'root',\n    //transforms: [encryptor],\n    storage\n}\n\nconst appReducer = combineReducers({\n    mouse,\n    allCells,\n    editCell,\n    select,\n});\n\nconst persistedReducer = persistReducer(persistConfig, appReducer)\n\n//export const store = createStore(persistedReducer);\nexport const store = createStore(appReducer);\n//export const persistor = persistStore(store);\nexport const purge = () => {\n    //persistor.purge();\n    localStorage.clear();\n};\n","import React from 'react'\n\nconst RowContext = React.createContext({})\n\nexport const RowProvider = RowContext.Provider\nexport const RowConsumer = RowContext.Consumer\nexport default RowContext\n","import React, {Fragment, useState, useEffect, useRef } from 'react';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { RowProvider } from  '../../Components/RowContext'\nimport { \n    SELECT_CELL,\n    UNSELECT_CELL,\n    UNSELECT_ALL\n} from '../../Reducers/Cells'\nimport {\n    SET_INITIAL_CELL,\n    SET_LAST_CELL\n} from '../../Reducers/Select'\n\nfunction TableRow({children, index}) {\n    const dispatch = useDispatch();\n    const allCells = useSelector(state => state.allCells);\n\n    const selectRow = (rowIndex) => {\n\n        dispatch(\n            UNSELECT_ALL()\n        );\n\n        let setInital = false;\n\n        for (let cellId in allCells) {\n            let cell = allCells[cellId];\n            if (cell.editable && cell.rowIndex == rowIndex) {\n                if (!setInital) {\n                    dispatch(\n                        SET_INITIAL_CELL({\n                            id: cellId\n                        })\n                    );\n                    setInital = true;\n                }\n\n                dispatch(\n                    SELECT_CELL({\n                        id: cellId\n                    })\n                );\n\n                // TODO - set this as actual last cell in row (needs to use array rather than object state)\n\n                dispatch(\n                    SET_LAST_CELL({\n                        id: cellId\n                    })\n                );\n\n            }\n       }\n    }\n\n    const selectColumn = (colKey) => {\n        dispatch(\n            UNSELECT_ALL()\n        );\n        let setInital = false;\n\n        for (let cellId in allCells) {\n            let cell = allCells[cellId];\n            if (cell.key == colKey) {\n                if (!setInital) {\n                    dispatch(\n                        SET_INITIAL_CELL({\n                            id: cellId\n                        })\n                    );\n                    setInital = true;\n                }\n\n                dispatch(\n                    SELECT_CELL({\n                        id: cell.id\n                    })\n                );\n\n                dispatch(\n                    SET_LAST_CELL({\n                        id: cellId\n                    })\n                );\n            }\n       }\n    }\n\n    return (\n        <RowProvider value={{ \n            selectRow: selectRow,\n            selectColumn: selectColumn\n        }}>\n            <tr className=\"govuk-table__row\">\n                {children}\n            </tr>\n        </RowProvider>\n    );\n}\n\nexport default TableRow;\n","\nexport const getCellId = (key, index) => {\n    return \"id_\" + key + \"_\" + index;\n}\n\nexport const months = [ \n    \"apr\", \n    \"may\", \n    \"jun\",\n    \"jul\", \n    \"aug\", \n    \"sep\", \n    \"oct\", \n    \"nov\", \n    \"dec\",\n    \"jan\", \n    \"feb\", \n    \"mar\"\n];\n","import React, {Fragment, useState, useEffect, useRef, useContext } from 'react';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport {\n    SET_RECT,\n    SELECT_CELL,\n    SET_VALUE,\n    UNSELECT_ALL\n} from '../../Reducers/Cells'\nimport { \n    SET_EDIT_CELL\n} from '../../Reducers/Edit'\nimport {\n    SET_INITIAL_CELL,\n    SET_LAST_CELL\n} from '../../Reducers/Select'\nimport {\n    getCellId,\n    months\n} from '../../Util'\n\nfunction TableCell({children, index, cellId}) {\n    const dispatch = useDispatch();\n\n    let cellRef = React.createRef();\n    const inputRef = useRef(null);\n\n    const mouseDn = useSelector(state => state.mouse.down);\n    const allCells = useSelector(state => state.allCells);\n    const editCell = useSelector(state => state.editCell.cellId);\n\n    const selectCell = () => {\n        if (mouseDn) {\n            dispatch(\n                SELECT_CELL({\n                    id: cellId\n                })\n            );\n\n            dispatch(\n                SET_LAST_CELL({\n                    id: cellId\n                })\n            );\n        }\n    }\n\n    useEffect(() => {\n        if (allCells) {\n            dispatch(\n                SET_RECT({\n                    id: cellId,\n                    rect: cellRef.current.getBoundingClientRect()\n                })\n            );\n        }\n    }, []);\n\n    useEffect(() => {\n        if (inputRef && inputRef.current) {\n            inputRef.current.focus();\n        }\n    });\n\n    const isSelected = () => {\n        let cellData = allCells[cellId];\n\n        if (cellData && cellData.selected) {\n            return true;\n        }\n\n        return false\n    }\n\n    const handleKeyPress = (event) => {\n        if(event.key === 'Enter'){\n            dispatch({\n                type: SET_EDIT_CELL,\n                cellId: null\n            });\n        }\n    }\n\n    const handleKeyDown = (event) => {\n        if (event.keyCode == 9) {\n            // Get next cell\n            let cellData = allCells[cellId]\n            let colIndex = months.indexOf(cellData.key);\n\n            let inScope = [];\n\n            // TODO - do this once at the start of the app\n            for (const key in allCells) {\n                let cell = allCells[key];\n                inScope.push(cell);\n            }\n\n            let cells = inScope.filter((cell) => {\n                return (\n                    cell.rowIndex == cellData.rowIndex &&\n                    cell.key === months[colIndex + 1]\n                )\n            })\n\n            let nextCell = cells[0]\n\n            dispatch({\n                type: UNSELECT_ALL\n            });\n\n            dispatch(\n                SET_LAST_CELL({\n                    id: nextCell.id\n                })\n            );\n\n            dispatch(\n                SET_INITIAL_CELL({\n                    id: nextCell.id\n                })\n            );\n\n            dispatch(\n                SELECT_CELL({\n                    id: nextCell.id\n                })\n            );\n\n            dispatch({\n                type: SET_EDIT_CELL,\n                cellId: nextCell.id\n            });\n        }\n    }\n\n    const setContentState = (value) => {\n        //setCellContent(value);\n        if (!parseInt(value)) {\n            return\n        }\n\n        dispatch(\n            SET_VALUE({\n                id: cellId,\n                value: value\n            })\n        );\n    }\n\n    return (\n        <Fragment>\n            <td\n                className={isSelected() ? 'highlight govuk-table__cell' : 'no-select govuk-table__cell'}\n                ref={cellRef}\n                onDoubleClick={ () => {\n                    dispatch({\n                        type: SET_EDIT_CELL,\n                        cellId: cellId\n                    });\n                }}\n\n                onMouseOver={ () => { \n                    selectCell();\n                }}\n\n                onMouseDown={ () => {\n                    dispatch(\n                        SELECT_CELL({\n                            id: cellId\n                        })\n                    );\n\n                    dispatch(\n                        SET_INITIAL_CELL({\n                            id: cellId\n                        })\n                    );\n\n                    dispatch(\n                        SET_LAST_CELL({\n                            id: cellId\n                        })\n                    );\n                }}\n            >\n                {editCell == cellId ? (\n                    <input\n                        className=\"cell-input\"\n                        ref={inputRef}\n                        type=\"text\"\n                        value={allCells[cellId].value}\n                        onChange={e => setContentState(e.target.value)}\n                        onKeyPress={handleKeyPress}\n                        onKeyDown={handleKeyDown}\n                    />\n                ) : (\n                    <Fragment>\n                        {allCells[cellId].value}\n                    </Fragment>\n                )}\n            </td>\n        </Fragment>\n    );\n}\n\nexport default TableCell;\n","import React, {Fragment, useState, useEffect, useRef, useContext } from 'react';\n\nimport RowContext from '../../Components/RowContext'\n\nfunction TableHandle({children, rowIndex}) {\n\tconst context = useContext(RowContext)\n\n\treturn (\n\t\t<td className=\"handle govuk-table__cell indicate-action\"\n\t\t\tonClick={() => { \n\t\t\t\tcontext.selectRow(rowIndex);\n\t\t\t}\n\t\t}>\n\t\t\t{children}\n\t\t</td>\n\t);\n}\n\nexport default TableHandle;\n","import React, {Fragment, useState, useEffect, useRef, useContext } from 'react';\n\nimport RowContext from '../../Components/RowContext'\n\nfunction ColumnHeader({children, colKey}) {\n    const context = useContext(RowContext)\n\n    return (\n        <th className=\"govuk-table__header indicate-action\"\n            onClick={() => {\n                context.selectColumn(colKey);\n            }\n        }>\n            {children}\n        </th>\n    );\n}\n\nexport default ColumnHeader;\n","import React, {Fragment, useState, useEffect, useRef } from 'react';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\n\nimport { store } from '../../Store';\n\nimport TableRow from '../../Components/TableRow/index'\nimport TableCell from '../../Components/TableCell/index'\nimport TableHandle from '../../Components/TableHandle/index'\nimport ColumnHeader from '../../Components/ColumnHeader/index'\nimport { SET_MOUSE_DOWN } from '../../Reducers/Mouse'\nimport { \n    SET_EDIT_CELL\n} from '../../Reducers/Edit'\nimport {\n    ADD_CELL,\n    SELECT_CELL,\n    UNSELECT_CELL,\n    UNSELECT_ALL,\n    SET_VALUE,\n} from '../../Reducers/Cells'\nimport {\n    getCellId,\n    months\n} from '../../Util'\nimport {\n    SET_INITIAL_CELL,\n    SET_LAST_CELL\n} from '../../Reducers/Select'\n\nfunction Table() {\n    const LEFT_TO_RIGHT = 'LEFT_TO_RIGHT';\n    const RIGHT_TO_LEFT = 'RIGHT_TO_LEFT';\n\n    const TOP_TO_BOTTOM = 'TOP_TO_BOTTOM';\n    const BOTTOM_TO_TOP = 'BOTTOM_TO_TOP';\n\n    const dispatch = useDispatch();\n    const initialCell = useSelector(state => state.select.initial);\n    const lastCell = useSelector(state => state.select.last);\n\n    const [allCellsArr, setAllCellsArr] = useState([]);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    // const selectedCells = useSelector(state => state.selection.cells);\n    //const allCells = useSelector(state => state.allCells);\n    // const isSelecting = useSelector(state => state.selection.isSelecting);\n\n    const mouseDown = useSelector(state => state.mouse.down);\n    const allCells = useSelector(state => state.allCells);\n\n    //const [tableData, setTableData] = useState([]);\n\n    const captureMouseDn = (e) => {\n        dispatch({\n            type: UNSELECT_ALL\n        });\n        \n        if (e.srcElement.localName != \"input\") {\n            dispatch({\n                type: SET_EDIT_CELL,\n                cellId: null\n            });\n        }\n\n        dispatch({\n            type: SET_MOUSE_DOWN,\n            down: true\n        });\n    }\n\n    const captureMouseUp = (e) => {\n        dispatch({\n            type: SET_MOUSE_DOWN,\n            down: false\n        });\n    }\n\n    const handleKeyDown = (event) => {\n        console.log(event);\n        if (event.keyCode == 9 && event.target.localName != \"input\") {            \n            const state = store.getState();\n            // Get next cell\n            let cellData =  state.allCells[state.select.initial]\n            let colIndex = months.indexOf(cellData.key);\n\n            let inScope = [];\n\n            // TODO - do this once at the start of the app\n            for (const key in state.allCells) {\n                let cell = state.allCells[key];\n                inScope.push(cell);\n            }\n\n            console.log(inScope);\n\n            let cells = inScope.filter((cell) => {\n                return (\n                    cell.rowIndex == cellData.rowIndex &&\n                    cell.key === months[colIndex + 1]\n                )\n            })\n\n            let nextCell = cells[0]\n\n            dispatch({\n                type: UNSELECT_ALL\n            });\n\n            dispatch(\n                SET_LAST_CELL({\n                    id: nextCell.id\n                })\n            );\n\n            dispatch(\n                SET_INITIAL_CELL({\n                    id: nextCell.id\n                })\n            );\n\n            dispatch(\n                SELECT_CELL({\n                    id: nextCell.id\n                })\n            );\n\n            dispatch({\n                type: SET_EDIT_CELL,\n                cellId: nextCell.id\n            });\n        }\n    }\n\n    const getTopLeftCell = (cells, initialCell) => {\n        let topLeftCell = initialCell;\n\n        for (const cell of cells) {\n            if (cell.rect.x < topLeftCell.rect.x && \n                cell.rect.y < topLeftCell.rect.y) {\n                topLeftCell = cell\n            }\n        }\n\n        return topLeftCell\n    }\n\n    const capturePaste = (e) => {\n        let pasteContent = e.clipboardData.getData('Text');\n        let lines = pasteContent.split('\\n');\n        const state = store.getState();\n\n        let initial = state.select.initial;\n        let initialCell = state.allCells[initial];\n\n        let inScope = [];\n        // TODO - do this once at the start of the app\n        for (const key in state.allCells) {\n            let cell = state.allCells[key];\n            inScope.push(cell);\n        }\n\n        if (!initialCell.selected) {\n            return\n        }\n\n        let selectedCells = inScope.filter((cell) => {\n            return cell.selected\n        });\n\n        // Find top left cell\n        let topLeftCell = getTopLeftCell(selectedCells, initialCell)\n        let rowIndex = topLeftCell.rowIndex\n\n        for (const line of lines) {\n            let lineParts = line.split('\\t')\n            let colIndex = months.indexOf(topLeftCell.key);\n\n            for (const linePart of lineParts) {\n                if (!parseInt(linePart)) {\n                    setErrorMessage(\"You can only paste whole numbers into cells\");\n                    continue\n                }\n\n                let cells = inScope.filter((cell) => {\n                    return (\n                        cell.rowIndex == rowIndex &&\n                        cell.key === months[colIndex]\n                    )\n                })\n                if (cells[0]) {\n                    dispatch(\n                        SET_VALUE({\n                            id: cells[0].id,\n                            value: linePart\n                        })\n                    );\n\n                    dispatch(\n                        SELECT_CELL({\n                            id: cells[0].id\n                        })\n                    );\n\n                    dispatch(\n                        SET_LAST_CELL({\n                            id: cells[0].id\n                        })\n                    )\n                }\n\n                colIndex++\n            }\n            rowIndex++\n        }\n    }\n\n    const setClipBoardContent = (e) => {\n\n        const state = store.getState();\n        // TODO - do this once at the start of the app\n        let inScope = [];\n        for (const key in state.allCells) {\n            let cell = state.allCells[key];\n            inScope.push(cell);\n        }\n\n        let initial = state.select.initial;\n        let initialCell = state.allCells[initial];\n\n        if (!initialCell.selected) {\n            return\n        }\n\n        e.preventDefault();\n\n        let selectedCells = inScope.filter((cell) => {\n            return cell.selected\n        });\n\n        let topLeftCell = getTopLeftCell(selectedCells, initialCell)\n\n        console.log(selectedCells);\n\n        let clipBoardContent = \"\";\n\n        // let currentRow = topLeftCell.rowIndex\n\n        let rowIndex = topLeftCell.rowIndex\n\n        for (const cell of selectedCells) {\n            if (cell.rowIndex != rowIndex) {\n                rowIndex = cell.rowIndex\n                clipBoardContent += \"\\n\"\n            }\n            clipBoardContent += cell.value + \"\\t\"\n\n            console.log(cell.value + \"\\t\");\n            console.log(clipBoardContent);\n        }\n\n        console.log(\"clipBoardContent.trim()\", clipBoardContent);\n\n        navigator.clipboard.writeText(clipBoardContent)\n    }\n\n    useEffect(() => {\n        window.cell_data = allCells;\n    }, [allCells]);\n\n    useEffect(() => {\n        let cellIndex = 0;\n        window.table_data.forEach(function (cellData, rowIndex) {\n            for (let key in cellData) {\n\n                let editable = false;\n\n                for (let i = 0; i < window.editable_periods.length; i++) {\n                    let shortName = window.editable_periods[i][\"fields\"][\"period_short_name\"];\n                    if (shortName && shortName.toLowerCase() == key) {\n                        editable = true;\n                        break;\n                    }\n                }\n\n                dispatch(\n                    ADD_CELL({\n                        id: getCellId(key, rowIndex),\n                        index: cellIndex,\n                        rowIndex: rowIndex,\n                        key: key,\n                        value: cellData[key],\n                        editable: editable,\n                        programmeCode: cellData[\"programme__programme_code\"],\n                        naturalAccountCode: cellData[\"natural_account_code__natural_account_code\"]\n                    })\n                );\n                cellIndex++;\n            }\n        });\n\n        window.addEventListener(\"mousedown\", captureMouseDn);\n        window.addEventListener(\"mouseup\", captureMouseUp);\n        window.addEventListener(\"paste\", capturePaste);\n        window.addEventListener(\"keydown\", handleKeyDown);\n        window.addEventListener(\"copy\", setClipBoardContent);\n\n        return () => {\n            window.removeEventListener(\"onmouseup\", captureMouseDn);\n            window.removeEventListener(\"mousedown\", captureMouseUp);\n            window.removeEventListener(\"paste\", capturePaste);\n            window.removeEventListener(\"keydown\", handleKeyDown);\n            window.removeEventListener(\"copy\", setClipBoardContent);\n        };\n    }, []);\n\n\tif (mouseDown) {\n\t\tlet initial = allCells[initialCell];\n\t\tlet last = allCells[lastCell];\n\n\t\tif (initial && last) {\n\n            let horizontalDirection = LEFT_TO_RIGHT;\n            let verticalDirection = TOP_TO_BOTTOM;\n\n            // Check for select direction\n            if (initial.rect.x > last.rect.x) {\n                // left to right\n                horizontalDirection = RIGHT_TO_LEFT;\n            }\n\n            if (initial.rect.y > last.rect.y) {\n                // top to bottom\n                verticalDirection = BOTTOM_TO_TOP\n            }\n\n\t\t\tfor (let cellId in allCells) {\n                let cell = allCells[cellId];\n\n                if (!cell || !cell.rect) {\n                    continue;\n                }\n\n                let selectable = false;\n\n                if (horizontalDirection === LEFT_TO_RIGHT) {\n                    if (verticalDirection === TOP_TO_BOTTOM) {\n                        if (\n                            cell.rect.x <= last.rect.x &&\n                            cell.rect.x >= initial.rect.x &&\n\n                            cell.rect.y >= initial.rect.y &&\n                            cell.rect.y <= last.rect.y\n                        ) {\n                            selectable = true;\n                        }\n                    } else {\n                        if (\n                            cell.rect.x <= last.rect.x &&\n                            cell.rect.x >= initial.rect.x &&\n\n                            cell.rect.y <= initial.rect.y &&\n                            cell.rect.y >= last.rect.y\n                        ) {\n                            selectable = true;\n                        }\n                    }\n                } else { // RIGHT_TO_LEFT\n                    if (verticalDirection === TOP_TO_BOTTOM) {\n                        if (\n                            cell.rect.x >= last.rect.x &&\n                            cell.rect.x <= initial.rect.x &&\n\n                            cell.rect.y >= initial.rect.y &&\n                            cell.rect.y <= last.rect.y\n                        ) {\n                            selectable = true;\n                        }\n                    } else {\n                        if ( // BOTTOM_TO_TOP\n                            cell.rect.x >= last.rect.x &&\n                            cell.rect.x <= initial.rect.x &&\n\n                            cell.rect.y <= initial.rect.y &&\n                            cell.rect.y >= last.rect.y\n                        ) {\n                            selectable = true;\n                        }\n                    }\n                }\n\n                if (selectable) {\n                    dispatch(\n                        SELECT_CELL({\n                            id: cellId\n                        })\n                    );\n                } else {\n                   dispatch(\n                        UNSELECT_CELL({\n                            id: cell.id\n                        })\n                    );\n                }\n\t\t\t}\n\t\t}\n\t}\n\n    const getCells = () => {\n        let cells = [];\n        if (window.table_data) {\n            let cellIndex = 0;\n            window.table_data.forEach(function (cellData, i) {\n                let monthCells = [];\n                for (const month of months) {\n                    let id = getCellId(month, i)\n                    monthCells.push(\n                        <TableCell key={cellIndex} index={cellIndex} cellId={id} />\n                    )\n                    cellIndex++\n                }\n                cells.push(\n                    <TableRow key={i} index={(i + 1)}>\n                        <TableHandle rowIndex={i}>{cellData[\"programme__programme_code\"]} - {cellData[\"programme__programme_description\"]}</TableHandle>\n                        {monthCells}\n                    </TableRow>\n                );\n            });\n        }\n\t    return cells;\n    }\n\n    return (\n        <Fragment>\n            {errorMessage &&\n                <div className=\"govuk-error-summary\" aria-labelledby=\"error-summary-title\" role=\"alert\" tabIndex=\"-1\" data-module=\"govuk-error-summary\">\n                    <h2 className=\"govuk-error-summary__title\" id=\"error-summary-title\">\n                        There is a problem\n                    </h2>\n                    <div className=\"govuk-error-summary__body\">\n                        <ul className=\"govuk-list govuk-error-summary__list\">\n                            <li>\n                                <a href=\"#passport-issued-error\">{errorMessage}</a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            }\n            <table className=\"govuk-table\" id=\"forecast-table\">\n                <caption className=\"govuk-table__caption\">Edit forecast</caption>\n                <thead className=\"govuk-table__head\">\n                    <TableRow index=\"0\">\n                        <th className=\"govuk-table__header \">Programme</th>\n                        <ColumnHeader colKey=\"apr\">Apr</ColumnHeader>\n                        <ColumnHeader colKey=\"may\">May</ColumnHeader>\n                        <ColumnHeader colKey=\"jun\">Jun</ColumnHeader>\n                        <ColumnHeader colKey=\"jul\">Jul</ColumnHeader>\n                        <ColumnHeader colKey=\"aug\">Aug</ColumnHeader>\n                        <ColumnHeader colKey=\"sep\">Sep</ColumnHeader>\n                        <ColumnHeader colKey=\"oct\">Oct</ColumnHeader>\n                        <ColumnHeader colKey=\"nov\">Nov</ColumnHeader>\n                        <ColumnHeader colKey=\"dec\">Dec</ColumnHeader>\n                        <ColumnHeader colKey=\"jan\">Jan</ColumnHeader>\n                        <ColumnHeader colKey=\"feb\">Feb</ColumnHeader>\n                        <ColumnHeader colKey=\"mar\">Mar</ColumnHeader>\n                    </TableRow>\n                </thead>\n                <tbody className=\"govuk-table__body\">\n                    {getCells()}\n                </tbody>\n            </table>\n        </Fragment>\n    );\n}\n\nexport default Table;\n","import React, {Fragment, useState, useEffect, useRef } from 'react';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { store } from './Store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport Table from './Components/Table/index'\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Table />\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.scss\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}